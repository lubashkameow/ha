document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    tg.expand();
    tg.enableClosingConfirmation();
    tg.BackButton.show();
    tg.BackButton.onClick(() => tg.close());
    
    // –ó–∞–ø—Ä–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    disableZoom();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initUserData();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    loadServicesForView();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
    document.getElementById('book-btn').addEventListener('click', () => {
        showBookingForm();
    });

    checkIfUserIsMaster();



});

let selectedDate = null;
let selectedService = null;
let selectedSlot = null;
let selectedMaster = null;
let isCurrentUserMaster = false;
let currentWeekStart = new Date();

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
function disableZoom() {
    const viewport = document.querySelector('meta[name="viewport"]');
    viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
    
    document.addEventListener('touchmove', function(e) {
        if (e.scale !== 1) e.preventDefault();
    }, { passive: false });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserData() {
    const tg = window.Telegram.WebApp;
    const user = tg.initDataUnsafe.user;
    
    if (user) {
        const userNameElement = document.getElementById('user-name');
        if (userNameElement) {
            userNameElement.textContent = user.first_name || user.username || '–ì–æ—Å—Ç—å';
        }
        
        if (user.photo_url) {
            const avatarElement = document.getElementById('user-avatar');
            if (avatarElement) {
                avatarElement.src = user.photo_url;
            }
        }
    }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
async function checkIfUserIsMaster() {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user?.id;
    if (!userId) return;

    try {
        const response = await fetch(`/.netlify/functions/ismaster?user_id=${userId}`);
        const data = await response.json();

        if (data.is_master) {
            isCurrentUserMaster = true;
            addReportsNavItem();
            document.getElementById('edit-portfolio-btn').style.display = 'block';
            document.getElementById('edit-calendar-btn').style.display = 'block';
            document.getElementById('master-prev-week').style.display = 'block';
            document.getElementById('master-next-week').style.display = 'block';
            initPortfolioEditModal();
        } else {
            isCurrentUserMaster = false;
            document.getElementById('edit-portfolio-btn').style.display = 'none';
            document.getElementById('edit-calendar-btn').style.display = 'none';
            document.getElementById('master-prev-week').style.display = 'none';
            document.getElementById('master-next-week').style.display = 'none';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Å—Ç–µ—Ä–∞:', error);
        isCurrentUserMaster = false;
        document.getElementById('edit-portfolio-btn').style.display = 'none';
        document.getElementById('edit-calendar-btn').style.display = 'none';
        document.getElementById('master-prev-week').style.display = 'none';
        document.getElementById('master-next-week').style.display = 'none';
    }
}

async function loadReport(type) {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user?.id;
    const month = document.getElementById('report-month').value;

    if (!userId) {
        console.error('–û—à–∏–±–∫–∞: user_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
        document.getElementById('report-result').innerHTML = '<p class="error">–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</p>';
        return;
    }

    if (!month) {
        console.error('–û—à–∏–±–∫–∞: –º–µ—Å—è—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω');
        document.getElementById('report-result').innerHTML = '<p class="error">–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü</p>';
        return;
    }

    console.log(`Loading report: type=${type}, user_id=${userId}, month=${month}`);

    try {
        const response = await fetch(`/.netlify/functions/getreport?user_id=${userId}&month=${month}&type=${type}`);
        const data = await response.json();

        if (!response.ok) {
            console.error('Report error:', data);
            document.getElementById('report-result').innerHTML = `<p class="error">–û—à–∏–±–∫–∞: ${data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç'}</p>`;
            return;
        }

        const container = document.getElementById('report-result');
        container.innerHTML = renderReportTable(data, type);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        document.getElementById('report-result').innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞</p>';
    }
}

function renderReportTable(data, type) {
    if (!data || !data.summary) {
        return '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.</p>';
    }

    const headersMap = {
        materials: {
            name_material: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
            quantity_ml: '–û–±—ä–µ–º (–º–ª)',
            quantity: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            cost: '–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)'
        }
    };

    let html = '';

    // Summary section
    html += '<div class="report-summary">';
    if (type === 'clients') {
        html += `<p>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${data.summary.total_clients}</p>`;
        html += `<p>–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${data.summary.new_clients}</p>`;
    } else if (type === 'appointments') {
        html += `<p>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ª—É–≥: ${data.summary.completed_services}</p>`;
        html += `<p>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É—Å–ª—É–≥:</p><ul>`;
        data.summary.service_popularity.forEach(s => {
            html += `<li>${s.name_service} (${s.name_length}): ${s.count}</li>`;
        });
        html += `</ul>`;
        html += `<p>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏: ${data.summary.upcoming}</p>`;
    } else if (type === 'materials') {
        html += `<p>–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${data.summary.total_cost} ‚ÇΩ</p>`;
        html += `<p>–†–∞—Å—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Å–ª—É–≥–∏: ${data.summary.upcoming_cost} ‚ÇΩ</p>`;
        html += `<p>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥: ${data.summary.expected_cost} ‚ÇΩ</p>`;
    } else if (type === 'profit') {
        html += `<p>–í—ã—Ä—É—á–∫–∞: ${data.summary.total_revenue} ‚ÇΩ</p>`;
        html += `<p>–†–∞—Å—Ö–æ–¥ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${data.summary.total_material_cost} ‚ÇΩ</p>`;
        html += `<p>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${data.summary.profit} ‚ÇΩ</p>`;
        html += `<p>–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${data.summary.expected_profit} ‚ÇΩ</p>`;
    }
    html += '</div>';

    // Tables only for materials
    if (type === 'materials') {
        // Data table (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏)
        if (data.data && Array.isArray(data.data) && data.data.length > 0) {
            const headers = headersMap[type];
            html += '<h4>–†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏)</h4>';
            html += '<table class="report-table"><thead><tr>';
            Object.values(headers).forEach(h => html += `<th>${h}</th>`);
            html += '</tr></thead><tbody>';

            data.data.forEach(row => {
                html += '<tr>';
                Object.keys(headers).forEach(key => {
                    let value = row[key] || '';
                    if (key === 'cost') value = `${value} ‚ÇΩ`;
                    html += `<td>${value}</td>`;
                });
                html += '</tr>';
            });

            html += '</tbody></table>';
        } else {
            html += '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.</p>';
        }

        // Upcoming data table (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Å–ª—É–≥–∏)
        if (data.upcoming_data && Array.isArray(data.upcoming_data) && data.upcoming_data.length > 0) {
            const headers = headersMap[type];
            html += '<h4>–†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Å–ª—É–≥–∏)</h4>';
            html += '<table class="report-table"><thead><tr>';
            Object.values(headers).forEach(h => html += `<th>${h}</th>`);
            html += '</tr></thead><tbody>';

            data.upcoming_data.forEach(row => {
                html += '<tr>';
                Object.keys(headers).forEach(key => {
                    let value = row[key] || '';
                    if (key === 'cost') value = `${value} ‚ÇΩ`;
                    html += `<td>${value}</td>`;
                });
                html += '</tr>';
            });

            html += '</tbody></table>';
        } else {
            html += '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Å–ª—É–≥.</p>';
        }
    }

    return html;
}



function addReportsNavItem() {
    const nav = document.querySelector('.bottom-nav');
    if (!nav) return;

    const reportsItem = document.createElement('div');
    reportsItem.className = 'nav-item';
    reportsItem.setAttribute('data-page', 'reports');
    reportsItem.innerHTML = `
        <i>üìä</i>
        <span>–û—Ç—á–µ—Ç—ã</span>
    `;
    nav.appendChild(reportsItem);

    reportsItem.addEventListener('click', function() {
        document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
        document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));

        this.classList.add('active');

        let page = document.getElementById('page-reports');
        if (!page) {
            page = document.createElement('div');
            page.id = 'page-reports';
            page.className = 'page active';
            page.innerHTML = `
                <h3>–û—Ç—á–µ—Ç—ã</h3>
                <label for="report-month">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:</label>
                <input type="month" id="report-month" value="${new Date().toISOString().slice(0, 7)}" />
                <div class="report-buttons">
                    <button class="report-btn" onclick="loadReport('clients')">–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</button>
                    <button class="report-btn" onclick="loadReport('appointments')">–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø–∏—Å—è–º</button>
                    <button class="report-btn" onclick="loadReport('materials')">–†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</button>
                    <button class="report-btn" onclick="loadReport('profit')">–ü—Ä–∏–±—ã–ª—å</button>
                </div>
                <div id="report-result" class="report-result"></div>
            `;
            document.querySelector('.main-content').appendChild(page);
        } else {
            page.classList.add('active');
        }
    });
}


function addReportsNavItem() {
    const nav = document.querySelector('.bottom-nav');
    if (!nav) return;

    const reportsItem = document.createElement('div');
    reportsItem.className = 'nav-item';
    reportsItem.setAttribute('data-page', 'reports');
    reportsItem.innerHTML = `
        <i>üìä</i>
        <span>–û—Ç—á–µ—Ç—ã</span>
    `;
    nav.appendChild(reportsItem);

    reportsItem.addEventListener('click', function() {
        document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
        document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));

        this.classList.add('active');

        let page = document.getElementById('page-reports');
        if (!page) {
            page = document.createElement('div');
            page.id = 'page-reports';
            page.className = 'page active';
            page.innerHTML = `
                <h3>–û—Ç—á–µ—Ç—ã</h3>
                <label for="report-month">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:</label>
                <input type="month" id="report-month" value="${new Date().toISOString().slice(0, 7)}" />
                <div class="report-buttons">
                    <button class="report-btn" onclick="loadReport('clients')">–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</button>
                    <button class="report-btn" onclick="loadReport('appointments')">–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø–∏—Å—è–º</button>
                    <button class="report-btn" onclick="loadReport('materials')">–†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</button>
                    <button class="report-btn" onclick="loadReport('profit')">–ü—Ä–∏–±—ã–ª—å</button>
                </div>
                <div id="report-result" class="report-result"></div>
            `;
            document.querySelector('.main-content').appendChild(page);
        } else {
            page.classList.add('active');
        }
    });
}


// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function loadServicesForView() {
    const container = document.getElementById('services-container');
    if (!container) return;
    
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</div>';
    
    try {
        const response = await fetch('/.netlify/functions/getservices');
        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        renderServicesForView(data);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
        container.innerHTML = '<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª—É–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥
function renderServicesForView(data) {
    const container = document.getElementById('services-container');
    if (!container || !data.catalog) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let html = `
        <div class="gender-switcher">
            ${data.categories.map(cat => `
                <button class="gender-btn" data-category="${cat.id}">${cat.name}</button>
            `).join('')}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    html += '<div id="gender-catalogs"></div>';
    
    container.innerHTML = html;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (data.categories.length > 0) {
        renderCatalog(data.categories[0].id, data.catalog);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.gender-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const categoryId = btn.getAttribute('data-category');
            renderCatalog(categoryId, data.catalog);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.gender-btn').forEach(b => {
                b.classList.remove('active');
            });
            btn.classList.add('active');
        });
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É
    if (document.querySelector('.gender-btn')) {
        document.querySelector('.gender-btn').classList.add('active');
    }
}

// –†–µ–Ω–¥–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
function renderCatalog(categoryId, catalog) {
    const container = document.getElementById('gender-catalogs');
    if (!container) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    let categoryName = '';
    if (categoryId == 1) categoryName = '–ñ–µ–Ω—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥';
    else if (categoryId == 2) categoryName = '–ú—É–∂—Å–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥';
    
    let html = `<div class="gender-catalog" data-category="${categoryId}">`;
    html += `<h2 class="gender-title">${categoryName}</h2>`;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏
    const services = catalog[categoryName];
    if (services) {
        for (const [length, items] of Object.entries(services)) {
            html += `<div class="category-title">${length}</div>`;
            html += '<div class="services-list">';
            
            items.forEach(item => {
                html += `
                    <div class="service-item">
                        <span class="service-bullet">‚ú¶</span>
                        <span class="service-name">${item.name}</span>
                        <span class="service-price">${item.price}</span>
                    </div>
                `;
            });
            
            html += '</div>';
        }
    } else {
        html += '<p>–£—Å–ª—É–≥–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    }
    
    html += '</div>';
    container.innerHTML = html;
}


// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏
function showBookingForm() {
    const formContainer = document.getElementById('booking-form-container');
    
    if (formContainer) {
        formContainer.style.display = formContainer.style.display === 'none' ? 'block' : 'none';
        return;
    }
    
    const formHtml = `
<div id="booking-form-container" class="booking-form-container">
    <h3>${isCurrentUserMaster ? '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏' : '–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É'}</h3>
    
    ${isCurrentUserMaster ? `
    <div class="form-step active" id="step-client-info">
        <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
        <input type="text" id="client-name" class="form-control">
        <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
        <input type="tel" id="client-phone" class="form-control">
    </div>
    ` : ''}
    
    <div class="form-step active" id="step-catalog">
        <label>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥:</label>
        <select id="catalog-select" class="form-control">
            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ --</option>
            <option value="1">–ñ–µ–Ω—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥</option>
            <option value="2">–ú—É–∂—Å–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥</option>
        </select>
    </div>
    
    <div class="form-step" id="step-service" style="display:none;">
        <label>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</label>
        <select id="service-select" class="form-control" disabled>
            <option value="">-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ --</option>
        </select>
    </div>
    
    <div class="form-step" id="step-date" style="display:none;">
        <label>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</label>
        <div class="calendar-header">
            <button id="prev-week">&lt;</button>
            <div id="current-week-range"></div>
            <button id="next-week">&gt;</button>
        </div>
        <div class="week-days" id="week-days-container"></div>
    </div>

    <div class="form-step" id="step-masters" style="display:none;">
        <label>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:</label>
        <div id="masters-slots-container"></div>
    </div>
    
    <div class="form-step" id="step-comment" style="display:none;">
        <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
        <textarea id="booking-comment" class="form-control" placeholder="–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."></textarea>
    </div>
    
    <div class="form-step" id="step-confirmation" style="display:none;">
        <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≤–æ–¥–∫–∞ -->
    </div>
    
    <div class="form-navigation">
        <button id="prev-btn" class="nav-btn" disabled>–ù–∞–∑–∞–¥</button>
        <button id="next-btn" class="nav-btn">–î–∞–ª–µ–µ</button>
    </div>
</div>
`;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const placeholder = document.getElementById('booking-form-placeholder');
if (placeholder) {
    placeholder.innerHTML = formHtml;

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
    const modal = document.getElementById('booking-modal');
    if (modal) {
        modal.classList.remove('hidden');
    }

    // –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    const closeBtn = document.getElementById('close-booking-modal');
    if (closeBtn) {
        closeBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
            placeholder.innerHTML = ''; // –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        });
    }
}

    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
    initBookingForm();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
function initBookingForm() {
    let currentWeekStart = new Date();
    currentWeekStart.setHours(0, 0, 0, 0);
    const catalogSelect = document.getElementById('catalog-select');
    const serviceSelect = document.getElementById('service-select');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    let currentStep = 1;
    const totalSteps = 5;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    catalogSelect.addEventListener('change', async function() {
        if (!this.value) {
            serviceSelect.innerHTML = '<option value="">-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ --</option>';
            serviceSelect.disabled = true;
            return;
        }
        
        serviceSelect.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</option>';
        serviceSelect.disabled = true;
        
        try {
            const response = await fetch(`/.netlify/functions/getservices?category_id=${this.value}`);
            const data = await response.json();
            
            serviceSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É --</option>';
            
            const catalogName = this.value === '1' ? '–ñ–µ–Ω—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥' : '–ú—É–∂—Å–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥';
            const services = data.catalog[catalogName];
            
            for (const [subcategory, items] of Object.entries(services)) {
                const optgroup = document.createElement('optgroup');
                optgroup.label = subcategory;
                
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify({
                        id: item.id_service,
                        name: item.name,
                        price: item.price,
                        duration: item.duration_minutes,
                        name_length: subcategory
                    });
                    option.textContent = `${item.name} (${item.price})`;
                    optgroup.appendChild(option);
                });
                
                serviceSelect.appendChild(optgroup);
            }
            
            serviceSelect.disabled = false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
            serviceSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
        }
    });
    serviceSelect.addEventListener('change', function() {
    try {
        if (this.value && this.value !== '""') { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            selectedService = JSON.parse(this.value);
            console.log('Parsed service:', selectedService);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if (!selectedService.id || !selectedService.name || !selectedService.name_length) {
                console.error('Invalid service structure:', selectedService);
                selectedService = null;
            }
        } else {
            selectedService = null;
        }
    } catch (e) {
        console.error('JSON parse error:', e);
        console.error('Failed to parse:', this.value);
        selectedService = null;
    }
});
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    nextBtn.addEventListener('click', async function() {
    if (currentStep === totalSteps) {
            await confirmBooking();
            return;
        }
    if (!validateCurrentStep()) return;

    // –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if (currentStep === 2) { // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ—Ç –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        if (!serviceSelect.value) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É');
            return;
        }
        
        try {
            selectedService = JSON.parse(serviceSelect.value);
            console.log('Service selected for calendar:', selectedService);
            
            if (!selectedService || !selectedService.id) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏');
            }
        } catch (e) {
            console.error('Error parsing service:', e);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏');
            return;
        }
    }
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç –¥–∞—Ç—ã –∫ –º–∞—Å—Ç–µ—Ä–∞–º
    if (currentStep === 3) {
         if (!selectedDate) {
             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
             return;
            }
        }
        
    currentStep++;
    updateFormView();

    if (currentStep === 3) {
        loadAvailableDates(selectedService);
    }
});
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    prevBtn.addEventListener('click', function() {
        if (currentStep <= 1) return;
        
        currentStep--;
        updateFormView();
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    function validateCurrentStep() {
        switch(currentStep) {
            case 1: // –ö–∞—Ç–∞–ª–æ–≥
                if (!catalogSelect.value) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥');
                    return false;
                }
                return true;
                
            case 2: // –£—Å–ª—É–≥–∞
                if (!serviceSelect.value) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É');
                    return false;
                }
                return true;
                
            case 3: // –î–∞—Ç–∞
            // –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É - —Ç–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é selectedDate
            if (!selectedDate) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
                return false;
            }
            return true;
            
            case 4: // –í—Ä–µ–º—è –∏ –º–∞—Å—Ç–µ—Ä
            if (!selectedSlot || !selectedMaster) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ –º–∞—Å—Ç–µ—Ä–∞');
                return false;
            }
            return true;
            
        default:
            return true;
    }
}
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    function updateFormView() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
        document.querySelectorAll('.form-step').forEach(step => {
            step.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        document.getElementById(`step-${getStepName(currentStep)}`).style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prevBtn.disabled = currentStep === 1;
        nextBtn.textContent = currentStep === totalSteps ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : '–î–∞–ª–µ–µ';

        // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (5), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    if (currentStep === 5) {
        showConfirmationSummary();
    }
}
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —à–∞–≥–∞
    function getStepName(step) {
    switch(step) {
        case 1: return 'catalog';
        case 2: return 'service';
        case 3: return 'date';
        case 4: return 'comment';
        case 5: return 'confirmation';
        default: return '';
    }
}
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    async function loadAvailableDates(service) {
    const container = document.getElementById('week-days-container'); 
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç...</div>';
    
    try {
        console.log('Service ID:', service.id);
        
        if (!service.id) {
            throw new Error('Service ID is missing');
        }

        const response = await fetch(`/.netlify/functions/getcalendar?id_service=${service.id}`);
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (!data.dates) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        renderWeekDays(today);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
        container.innerHTML = `<p class="error">${error.message}</p>`;
    }
}
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderWeekDays(startDate) {
    const container = document.getElementById('week-days-container');
    const weekDays = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'];
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º startDate –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞—á–∞–ª—É –¥–Ω—è
    const weekStart = new Date(startDate);
    weekStart.setHours(0, 0, 0, 0);

    let html = '';
    for (let i = 0; i < 7; i++) {
        const date = new Date(weekStart);
        date.setDate(weekStart.getDate() + i);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        if (date < today) continue;

        const day = date.getDate();
        const weekDay = weekDays[date.getDay()];
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏–π –∏–∑-–∑–∞ UTC
        const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        const isToday = date.toDateString() === new Date().toDateString();

        html += `
            <div class="day-cell ${isToday ? 'today' : ''}" data-date="${dateStr}">
                <div class="week-day">${weekDay}</div>
                <div class="day-number">${day}</div>
            </div>
        `;
    }

    container.innerHTML = html || '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç</p>';
    updateWeekRangeText(weekStart);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—è–º
    document.querySelectorAll('.day-cell').forEach(cell => {
        cell.addEventListener('click', function () {
            document.querySelectorAll('.day-cell').forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');

            selectedDate = this.getAttribute('data-date'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            loadMastersSlots(selectedDate, selectedService.duration);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            document.getElementById('step-masters').style.display = 'block';
        });
    });
}

function updateWeekRangeText(startDate) {
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    
    const rangeElement = document.getElementById('current-week-range');
    rangeElement.textContent = `
        ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}
    `;
}

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–µ–¥–µ–ª–∏
document.getElementById('prev-week').addEventListener('click', () => {
    currentWeekStart.setDate(currentWeekStart.getDate() - 7);
    renderWeekDays(currentWeekStart);
});

document.getElementById('next-week').addEventListener('click', () => {
    currentWeekStart.setDate(currentWeekStart.getDate() + 7);
    renderWeekDays(currentWeekStart);
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤
async function loadMastersSlots(date) {
    const container = document.getElementById('masters-slots-container');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</div>';

    if (!selectedService || !selectedService.id) {
        console.error('–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id');
        container.innerHTML = '<p class="error">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</p>';
        return;
    }

    try {
        const mastersResponse = await fetch(`/.netlify/functions/getmaster?date=${date}`);
        const mastersData = await mastersResponse.json();
        console.log('Masters data:', mastersData);

        let html = '';
        for (const master of mastersData.masters) {
            console.log(`Fetching slots for master ${master.id_master}`);
            const slotsResponse = await fetch(
                `/.netlify/functions/gettimeslots?date=${date}&master_id=${master.id_master}&service_id=${selectedService.id}`
            );
            const slotsData = await slotsResponse.json();
            console.log(`Slots data for master ${master.id_master}:`, slotsData);

            if (slotsData.slots && slotsData.slots.length > 0) {
                html += `
                    <div class="master-slots">
                        <h3>${master.name_master}</h3>
                        <div class="master-slots-grid">
                            ${slotsData.slots.map(slot => `
                                <button class="time-slot"
                                    data-slot-id="${slot.id_slot}"
                                    data-master-id="${master.id_master}"
                                    data-master-name="${master.name_master}">
                                    ${slot.start_time}
                                </button>
                            `).join('')}
                        </div>
                    </div>
                `;
            } else {
                console.log(`No slots available for master ${master.id_master}`);
            }
        }

        container.innerHTML = html || '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É</p>';

        document.querySelectorAll('.time-slot').forEach(button => {
            button.addEventListener('click', function () {
                document.querySelectorAll('.time-slot').forEach(b => b.classList.remove('selected'));
                this.classList.add('selected');

                selectedSlot = this.getAttribute('data-slot-id');
                selectedMaster = {
                    id: this.getAttribute('data-master-id'),
                    name: this.getAttribute('data-master-name')
                };

                console.log('‚úÖ Slot selected:', selectedSlot);
                console.log('‚úÖ Master selected:', selectedMaster);
                updateBookingNavigation();
            });
        });

        document.getElementById('step-masters').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
    }
}

    // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏
    function showConfirmationSummary() {
    const summaryContainer = document.getElementById('step-confirmation');
    if (!summaryContainer) return;
    
    const timeSlot = document.querySelector('.time-slot.selected');
    
    summaryContainer.innerHTML = `
        <div class="confirmation-summary">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h3>
            <div class="summary-item">
                <span class="summary-label">üíá –£—Å–ª—É–≥–∞:</span>
                <span class="summary-value">${selectedService.name_length} (${selectedService.name}) (${selectedService.price})</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">üìÖ –î–∞—Ç–∞:</span>
                <span class="summary-value">${formatDate(selectedDate)}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">‚è∞ –í—Ä–µ–º—è:</span>
                <span class="summary-value">${timeSlot.textContent}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä:</span>
                <span class="summary-value">${selectedMaster.name || '–Ω–µ –≤—ã–±—Ä–∞–Ω'}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>
                <span class="summary-value">${document.getElementById('booking-comment').value || '–Ω–µ—Ç'}</span>
            </div>
        </div>
    `;
}

// –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateStr) {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ dateStr –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    const [year, month, day] = dateStr.split('-');
    const date = new Date(year, month - 1, day); // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const options = { day: 'numeric', month: 'long', weekday: 'short' };
    return date.toLocaleDateString('ru-RU', options);
}

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    async function confirmBooking() {
    const tg = window.Telegram.WebApp;
    const comment = document.getElementById('booking-comment').value;
    const timeSlot = document.querySelector('.time-slot.selected');

    if (!selectedService || !selectedSlot || !selectedMaster || !selectedMaster.id) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            selectedService,
            selectedSlot,
            selectedMaster
        });
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤—Ä–µ–º—è');
        return;
    }
    

    let userId = tg.initDataUnsafe.user.id;

    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä, —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
    if (isCurrentUserMaster) {
        const name = document.getElementById('client-name').value.trim();
        const phone = document.getElementById('client-phone').value.trim();

        if (!name || !phone) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞');
            return;
        }

        try {
            const clientResponse = await fetch('/.netlify/functions/createclient', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, phone })
            });

            const clientData = await clientResponse.json();
            if (!clientData.id_user) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
                return;
            }

            userId = clientData.id_user;
        } catch (err) {
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
            return;
        }
    }
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ selectedDate –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    const [year, month, day] = selectedDate.split('-');
    const formattedDate = `${year}-${month}-${day}`; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        
    try {
        const response = await fetch('/.netlify/functions/createbooking', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: userId,
                service_id: selectedService.id,
                service_length: selectedService.name_length,
                service_name: selectedService.name,
                service_price: selectedService.price,
                slot_id: selectedSlot,
                master_id: selectedMaster.id,
                master_name: selectedMaster.name,
                date: formattedDate,
                time: timeSlot.textContent,
                comment: comment
            })
        });

        if (response.ok) {
            const result = await response.json();
            showConfirmation(result);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        alert(error.message);
    }
}

    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    function showConfirmation(booking) {
    const formContainer = document.getElementById('booking-form-container');
    formContainer.innerHTML = `
        <div class="confirmation success-message">
            <h2>üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!</h2>
            <div class="confirmation-details">
                <p align="center">–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ</p>
                <p align="center"><strong>"–ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ"</strong></p>
            </div>
        </div>
    `;

    //document.getElementById('close-booking').addEventListener('click', () => {
    //    formContainer.style.display = 'none';
    //});
}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('.nav-item').forEach(item => {
    item.addEventListener('click', function() {
        const pageId = this.getAttribute('data-page');
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
        document.querySelectorAll('.nav-item').forEach(i => {
            i.classList.remove('active');
        });
        document.querySelectorAll('.page').forEach(p => {
            p.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É
        this.classList.add('active');
        document.getElementById(`page-${pageId}`).classList.add('active');
        
        if (pageId === 'bookings') {
            if (isCurrentUserMaster) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                renderWeekForMaster(currentWeekStart);
                initMasterCalendarNavigation();
                loadMasterBookingsByDate(today.toISOString().split('T')[0]);
            } else {
                loadUserBookings();
            }
        } else if (pageId === 'masters') {
            loadMasters(); 
        }

    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserBookings() {
    const container = document.getElementById('bookings-list');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...</div>';
    
    try {
        const tg = window.Telegram.WebApp;
        const response = await fetch(`/.netlify/functions/getappointments?user_id=${tg.initDataUnsafe.user.id}`);
        const data = await response.json();
        
        if (data.bookings && data.bookings.length > 0) {
            let html = '';
            data.bookings.forEach(booking => {
                html += `
                    <div class="booking-item">
                        <div class="booking-service"><p>–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É üíá:</p><p>${booking.service_length} (${booking.service_name})</p></div>
                        <div class="booking-date">üìÖ ${booking.date} –≤ ${booking.time}</div>
                        <div class="booking-master">üë©‚Äçüé® –ö –º–∞—Å—Ç–µ—Ä—É: ${booking.master_name}</div>
                        <div class="booking-master">üìù –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment || '–Ω–µ—Ç'}</div>
                        <div class="booking-master">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price}.0 ‚ÇΩ</div>
                        <button class="cancel-btn" data-booking-id="${booking.id_app}">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                `;
            });
            container.innerHTML = html;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
            document.querySelectorAll('.cancel-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const bookingId = this.getAttribute('data-booking-id');
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?')) {
                        await cancelBooking(bookingId);
                        loadUserBookings(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                    }
                });
            });
        } else {
            container.innerHTML = '<p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π</p>';
        }
    } catch (error) {
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π</p>';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö
async function loadMasters() {
    const btnContainer = document.getElementById('master-buttons');
    const infoContainer = document.getElementById('master-info');
    btnContainer.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</div>';
    infoContainer.innerHTML = '';

    try {
        const response = await fetch('/.netlify/functions/getmasters');
        const data = await response.json();
        const masters = data.masters;

        if (!masters || masters.length === 0) {
            btnContainer.innerHTML = '<p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
            return;
        }

        btnContainer.innerHTML = '';

        masters.forEach((master, index) => {
            const btn = document.createElement('button');
            btn.textContent = master.name_master;
            btn.className = 'master-button';
            if (index === 0) btn.classList.add('active');
            btn.addEventListener('click', () => {
                document.querySelectorAll('.master-button').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                displayMasterInfo(master);
            });
            btnContainer.appendChild(btn);
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        displayMasterInfo(masters[0]);

    } catch (error) {
        btnContainer.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤</p>';
        infoContainer.innerHTML = '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
async function cancelBooking(bookingId) {
    try {
        const response = await fetch('/.netlify/functions/cancelbooking', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ booking_id: bookingId })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏');
        }
        
        alert('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } catch (error) {
        alert(error.message);
    }
}

let currentPhotos = [];
let currentIndex = 0;

function openModal(photoObj, index) {
  const modal = document.getElementById('portfolio-modal');
  const modalImg = document.getElementById('modal-photo');
  const modalDesc = document.getElementById('modal-description');

  modalImg.src = photoObj.photo;
  modalDesc.textContent = photoObj.description_photo || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  currentIndex = index;
  modal.classList.remove('hidden');
}

document.getElementById('close-portfolio-modal').addEventListener('click', () => {
  document.getElementById('portfolio-modal').classList.add('hidden');
});

document.getElementById('prev-photo').addEventListener('click', () => {
  if (currentPhotos.length === 0) return;
  currentIndex = (currentIndex - 1 + currentPhotos.length) % currentPhotos.length;
  openModal(currentPhotos[currentIndex], currentIndex);
});

document.getElementById('next-photo').addEventListener('click', () => {
  if (currentPhotos.length === 0) return;
  currentIndex = (currentIndex + 1) % currentPhotos.length;
  openModal(currentPhotos[currentIndex], currentIndex);
});


async function displayMasterInfo(master) {
    const container = document.getElementById('master-info');
    container.innerHTML = `
        <div class="master-card">
            <h3>${master.name_master}</h3>
            <p>–¢–µ–ª–µ—Ñ–æ–Ω: ${master.phone_master}</p>
            <p>${master.description || '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä'}</p>
            <div class="portfolio-grid" id="portfolio-${master.id_master}">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...</div>
        </div>
    `;

    try {
        const res = await fetch(`/.netlify/functions/getportfolio?master_id=${master.id_master}`);
        const data = await res.json();
        const grid = document.getElementById(`portfolio-${master.id_master}`);
        if (data.photos && data.photos.length > 0) {
  currentPhotos = data.photos;

  grid.innerHTML = currentPhotos.map((photo, index) => `
    <img src="${photo.photo}" class="portfolio-photo" data-index="${index}">
  `).join('');

  grid.querySelectorAll('.portfolio-photo').forEach((img, index) => {
    img.addEventListener('click', () => openModal(currentPhotos[index], index));
  });
} else {
  grid.innerHTML = '<p>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ</p>';
}

    } catch (err) {
        container.querySelector('.portfolio-grid').innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</p>';
    }
}

function renderWeekForMaster(startDate) {
    const container = document.getElementById('week-days-master');
    const weekDays = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'];
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º startDate –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞—á–∞–ª—É –¥–Ω—è
    const weekStart = new Date(startDate);
    weekStart.setHours(0, 0, 0, 0);

    let html = '';
    for (let i = 0; i < 7; i++) {
        const date = new Date(weekStart);
        date.setDate(weekStart.getDate() + i);

        const day = date.getDate();
        const weekDay = weekDays[date.getDay()];
        const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        const isToday = date.toDateString() === new Date().toDateString();

        html += `
            <div class="day-cell ${isToday ? 'today selected' : ''}" data-date="${dateStr}">
                <div class="week-day">${weekDay}</div>
                <div class="day-number">${day}</div>
            </div>
        `;
    }

    container.innerHTML = html || '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç</p>';
    updateMasterWeekRangeText(weekStart);

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const todayCell = container.querySelector('.day-cell.today');
    if (todayCell) {
        todayCell.classList.add('selected');
        selectedDate = todayCell.getAttribute('data-date');
        loadMasterBookingsByDate(selectedDate);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—è–º
    document.querySelectorAll('#week-days-master .day-cell').forEach(cell => {
        cell.addEventListener('click', function () {
            document.querySelectorAll('#week-days-master .day-cell').forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
            selectedDate = this.getAttribute('data-date');
            loadMasterBookingsByDate(selectedDate);
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ–¥–µ–ª—å
function updateMasterWeekRangeText(startDate) {
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    
    const rangeElement = document.getElementById('master-current-week-range');
    if (rangeElement) {
        rangeElement.textContent = `${startDate.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}`;
    } else {
        console.error('Element #master-current-week-range not found');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
function initMasterCalendarNavigation() {
    const prevButton = document.getElementById('master-prev-week');
    const nextButton = document.getElementById('master-next-week');
    
    if (!prevButton || !nextButton) {
        console.error('Navigation buttons not found');
        return;
    }

    prevButton.addEventListener('click', () => {
        currentWeekStart.setDate(currentWeekStart.getDate() - 7);
        renderWeekForMaster(currentWeekStart);
    });

    nextButton.addEventListener('click', () => {
        currentWeekStart.setDate(currentWeekStart.getDate() + 7);
        renderWeekForMaster(currentWeekStart);
    });
}


// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
document.getElementById('edit-calendar-btn').addEventListener('click', () => {
    const modal = document.getElementById('calendar-modal');
    modal.classList.remove('hidden');
    currentMonth = new Date();
    renderCalendar(currentMonth);
});

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
document.getElementById('calendar-modal-close').addEventListener('click', () => {
    document.getElementById('calendar-modal').classList.add('hidden');
});

let currentMonth = new Date();

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –º–µ—Å—è—Ü
async function renderCalendar(date) {
    const container = document.getElementById('calendar-grid');
    const monthYear = document.getElementById('current-month');
    const weekdaysContainer = document.getElementById('calendar-weekdays');
    const prevMonthBtn = document.getElementById('prev-month');
    const nextMonthBtn = document.getElementById('next-month');
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;

    const year = date.getFullYear();
    const month = date.getMonth();
    monthYear.textContent = date.toLocaleString('ru-RU', { month: 'long', year: 'numeric' });

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonthIndex = today.getMonth();
    const maxMonth = new Date(currentYear, currentMonthIndex + 1);
    const minMonth = new Date(currentYear, currentMonthIndex);

    prevMonthBtn.disabled = date.getFullYear() === minMonth.getFullYear() && date.getMonth() === minMonth.getMonth();
    nextMonthBtn.disabled = date.getFullYear() === maxMonth.getFullYear() && date.getMonth() === maxMonth.getMonth();

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const weekdays = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'];
    weekdaysContainer.innerHTML = weekdays.map(day => `<div>${day}</div>`).join('');

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –ü–ù –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è—Ö –∏ –∑–∞–ø–∏—Å—è—Ö
    try {
        const response = await fetch(`/.netlify/functions/getcalendardata?user_id=${userId}&month=${year}-${String(month + 1).padStart(2, '0')}`);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${response.status}`);
        }
        const data = await response.json();
        const workDays = data.workdays || [];
        const bookings = data.bookings || [];

        let html = '';
        // –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for (let i = 0; i < startDay; i++) {
            html += '<div class="calendar-day disabled"></div>';
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–Ω–µ–π
        today.setHours(0, 0, 0, 0);
        for (let day = 1; day <= daysInMonth; day++) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const isPast = new Date(year, month, day) < today;
            const workDay = workDays.find(w => w.date_work === dateStr);
            const hasBookings = bookings.some(b => b.date === dateStr);
            let className = 'calendar-day';

            if (workDay && workDay.is_working) {
                className += hasBookings ? ' booked' : ' working';
            } else {
                className += ' holiday';
            }

            if (isPast) {
                className += ' disabled';
            }

            html += `<div class="${className}" data-date="${dateStr}" ${isPast ? 'disabled' : ''}>${day}</div>`;
        }

        container.innerHTML = html;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—è–º
        document.querySelectorAll('.calendar-day:not(.disabled)').forEach(cell => {
            cell.addEventListener('click', async () => {
                const date = cell.getAttribute('data-date');
                await toggleWorkDay(date, userId);
                renderCalendar(new Date(date)); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ renderCalendar:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prevMonthBtn.onclick = () => {
        if (!prevMonthBtn.disabled) {
            currentMonth.setMonth(currentMonth.getMonth() - 1);
            renderCalendar(currentMonth);
        }
    };

    nextMonthBtn.onclick = () => {
        if (!nextMonthBtn.disabled) {
            currentMonth.setMonth(currentMonth.getMonth() + 1);
            renderCalendar(currentMonth);
        }
    };
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è (—Ä–∞–±–æ—á–∏–π/–≤—ã—Ö–æ–¥–Ω–æ–π)
async function toggleWorkDay(date, userId) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        const formattedDate = new Date(date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
        const appResponse = await fetch(`/.netlify/functions/getapp?user_id=${userId}&date=${date}`);
        if (!appResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π: ${appResponse.status}`);
        }
        const appData = await appResponse.json();
        const bookings = appData.bookings || [];

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        const workDayResponse = await fetch(`/.netlify/functions/getworkday?user_id=${userId}&date=${date}`);
        if (!workDayResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è: ${workDayResponse.status}`);
        }
        const workDayData = await workDayResponse.json();
        const isWorking = workDayData.is_working;

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const action = isWorking ? '–≤—ã—Ö–æ–¥–Ω—ã–º' : '—Ä–∞–±–æ—á–∏–º';
        let confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ${formattedDate} ${action}?`;
        if (isWorking && bookings.length > 0) {
            confirmMessage = `–ù–∞ ${formattedDate} –µ—Å—Ç—å ${bookings.length} –∑–∞–ø–∏—Å–µ–π. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—ã—Ö–æ–¥–Ω—ã–º?`;
        }

        const confirmed = confirm(confirmMessage);
        if (!confirmed) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è:', date);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è ${date}: is_working = ${!isWorking}`);
        const response = await fetch('/.netlify/functions/toggleworkday', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: userId,
                date: date,
                is_working: !isWorking
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è: ${errorData.error || response.status}`);
        }

        const result = await response.json();
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        alert(`–î–µ–Ω—å ${formattedDate} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ ${action}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ toggleWorkDay:', error);
        alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–Ω—è: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –º–∞—Å—Ç–µ—Ä–∞
async function loadMasterBookingsByDate(date) {
    const container = document.getElementById('master-bookings-list');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...</div>';

    try {
        const tg = window.Telegram.WebApp;
        const response = await fetch(`/.netlify/functions/getapp?user_id=${tg.initDataUnsafe.user.id}&date=${date}`);
        const data = await response.json();
        const [yyyy, mm, dd] = date.split('-');
        const formattedDate = `${dd}.${mm}.${yyyy}`;
        
        if (data.bookings && data.bookings.length > 0) {
            let html = `<h3>–ó–∞–ø–∏—Å–∏ –Ω–∞ ${formattedDate}</h3>`;

            data.bookings.forEach(booking => {
                const phoneLink = booking.phone_user?.replace(/[^0-9]/g, '');
                html += `
                    <div class="booking-item">
                        <div><strong>${booking.time}</strong> ‚Äî ${booking.name_user || '–ö–ª–∏–µ–Ω—Ç'}</div>
                        <div>üìû ${booking.phone_user || '–Ω–µ—Ç'}
                            ${phoneLink ? `
                                <a href="tel:+${phoneLink}" class="phone-link">üì≤</a>
                                <a href="https://t.me/+${phoneLink}" class="tg-link">Telegram</a>
                            ` : ''}
                        </div>
                        <div>üíá ${booking.service_length} (${booking.service_name})</div>
                        <div>üí∞ ${booking.price}.0 ‚ÇΩ</div>
                        <div>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment || '–Ω–µ—Ç'}</div>
                        <button class="cancel-btn" data-booking-id="${booking.id_app}">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                `;
            });

            container.innerHTML = html;
            document.querySelectorAll('.cancel-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const bookingId = this.getAttribute('data-booking-id');
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?')) {
                        await cancelBooking(bookingId);
                        loadMasterBookingsByDate(date); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                    }
                });
            });
        } else {
            container.innerHTML = `<p>–ù–∞ ${formattedDate} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</p>`;
        }
    } catch (error) {
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π</p>';
        console.error('loadMasterBookingsByDate error:', error);
    }
}




// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function initPortfolioEditModal() {
    const editButton = document.getElementById('edit-portfolio-btn');
    const modal = document.getElementById('portfolio-edit-modal');
    const closeModal = document.getElementById('close-portfolio-edit-modal');
    const addPhotoButton = document.getElementById('add-portfolio-photo');

    editButton.addEventListener('click', () => {
        modal.classList.remove('hidden');
        loadPortfolioEditList();
    });

    closeModal.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    addPhotoButton.addEventListener('click', async () => {
        const photoInput = document.getElementById('new-portfolio-photo');
        const description = document.getElementById('new-portfolio-description').value;

        if (!photoInput.files[0]) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ');
            return;
        }

        const reader = new FileReader();
        reader.onload = async (e) => {
            const photo = e.target.result;
            await addPortfolioPhoto(photo, description);
            loadPortfolioEditList();
        };
        reader.readAsDataURL(photoInput.files[0]);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadPortfolioEditList() {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;
    const container = document.getElementById('portfolio-edit-list');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...</div>';

    try {
        const response = await fetch(`/.netlify/functions/getportfolio?master_id=${userId}`);
        const data = await response.json();
        if (data.photos && data.photos.length > 0) {
            container.innerHTML = data.photos.map((photo) => `
                <div class="portfolio-item" data-photo-id="${photo.id_photo}">
                    <img src="${photo.photo}" class="portfolio-photo">
                    <textarea class="form-control" data-description="${photo.id_photo}">${photo.description_photo || ''}</textarea>
                    <button class="save-description-btn" data-photo-id="${photo.id_photo}">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</button>
                    <button class="delete-portfolio-photo" data-photo-id="${photo.id_photo}">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `).join('');

            document.querySelectorAll('.save-description-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const photoId = btn.getAttribute('data-photo-id');
                    const description = document.querySelector(`textarea[data-description="${photoId}"]`).value;
                    await updatePortfolioDescription(photoId, description);
                    loadPortfolioEditList();
                });
            });

            document.querySelectorAll('.delete-portfolio-photo').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const photoId = btn.getAttribute('data-photo-id');
                    if (confirm('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ?')) {
                        await deletePortfolioPhoto(photoId);
                        loadPortfolioEditList();
                    }
                });
            });
        } else {
            container.innerHTML = '<p>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ</p>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', error);
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</p>';
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
async function addPortfolioPhoto(photo, description) {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;
    try {
        const response = await fetch('/.netlify/functions/add_portfolio_photo', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, photo, description })
        });
        const data = await response.json();
        if (response.ok) {
            alert('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            document.getElementById('new-portfolio-photo').value = '';
            document.getElementById('new-portfolio-description').value = '';
            loadPortfolioEditList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: ' + error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ
async function updatePortfolioDescription(photoId, description) {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;
    try {
        const response = await fetch('/.netlify/functions/update_portfolio_description', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, photo_id: photoId, description })
        });
        const data = await response.json();
        if (response.ok) {
            alert('–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data);
            throw new Error(data.error || `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
async function deletePortfolioPhoto(photoId) {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;
    try {
        const response = await fetch('/.netlify/functions/delete_portfolio_photo', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, photo_id: photoId })
        });
        const data = await response.json(); // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –∑–¥–µ—Å—å
        if (response.ok) {
            alert('–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
document.getElementById('new-portfolio-photo').addEventListener('change', async function(event) {
    const file = event.target.files[0];
    if (!file) {
        alert('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ 3 –ú–ë)
    if (file.size > 3 * 1024 * 1024) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ 3 –ú–ë.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ JPEG –∏–ª–∏ PNG)
    if (!file.type.match('image/jpeg|image/png|image/jpg')) {
        alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã JPEG –∏ PNG.');
        return;
    }

    try {
        const reader = new FileReader();
        reader.onload = async function(e) {
            const photo = e.target.result; // Base64 —Å—Ç—Ä–æ–∫–∞
            const description = document.getElementById('new-portfolio-description').value;
            await addPortfolioPhoto(photo, description);
            // loadPortfolioEditList() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ addPortfolioPhoto, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        };
        reader.onerror = function() {
            alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.');
        };
        reader.readAsDataURL(file);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
    }
});

// –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async function checkAndShowEditServicesButton() {
    const tg = window.Telegram.WebApp;
    const userId = tg.initDataUnsafe.user.id;
    try {
        const response = await fetch(`/.netlify/functions/isadmin?user_id=${userId}`);
        const data = await response.json();
        if (data.is_admin) {
            document.getElementById('edit-services-btn').style.display = 'block';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
function initServicesEditModal() {
    const editButton = document.getElementById('edit-services-btn');
    const modal = document.getElementById('services-edit-modal');
    const closeModal = document.getElementById('close-services-edit-modal');
    const servicesTab = document.getElementById('tab-services');
    const materialsTab = document.getElementById('tab-materials');
    const servicesContent = document.getElementById('services-tab-content');
    const materialsContent = document.getElementById('materials-tab-content');

    editButton.addEventListener('click', () => {
        modal.classList.remove('hidden');
        servicesTab.classList.add('active');
        materialsTab.classList.remove('active');
        servicesContent.classList.remove('hidden');
        materialsContent.classList.add('hidden');
        loadServicesEditList();
    });

    closeModal.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    servicesTab.addEventListener('click', () => {
        servicesTab.classList.add('active');
        materialsTab.classList.remove('active');
        servicesContent.classList.remove('hidden');
        materialsContent.classList.add('hidden');
        loadServicesEditList();
    });

    materialsTab.addEventListener('click', () => {
        servicesTab.classList.remove('active');
        materialsTab.classList.add('active');
        servicesContent.classList.add('hidden');
        materialsContent.classList.remove('hidden');
        loadMaterialsEditList();
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadServicesEditList() {
    const container = document.getElementById('services-tab-content');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</div>';

    try {
        const response = await fetch('/.netlify/functions/getservicesedit');
        const data = await response.json();
        console.log('Loaded services data:', data);
        if (data.services && data.services.length > 0) {
            let html = `
                <div class="add-service-form">
                    <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É</h4>
                    <input type="text" id="new-service-name" placeholder="–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞">
                    <select id="new-service-category">
                        <option value="1">–ñ–µ–Ω—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥</option>
                        <option value="2">–ú—É–∂—Å–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥</option>
                    </select>
                    <select id="new-service-length">
                        ${data.hairlengths.map(h => `<option value="${h.id_length}">${h.name_length}</option>`).join('')}
                        <option value="new">–ù–æ–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª</option>
                    </select>
                    <input type="text" id="new-length-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞" style="display: none;">
                    <input type="checkbox" id="new-service-ot"> <label for="new-service-ot">–¶–µ–Ω–∞ "–æ—Ç"</label>
                    <input type="number" id="new-service-price" placeholder="–¶–µ–Ω–∞ (‚ÇΩ)">
                    <input type="number" id="new-service-duration" placeholder="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)">
                    <div class="material-list" id="new-service-materials">
                        <h5>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h5>
                    </div>
                    <button id="add-material-btn" class="form-button">–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª</button>
                    <button id="add-service-btn" class="form-button">–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</button>
                </div>
            `;
            data.services.forEach(service => {
                html += `
                    <div class="service-edit-item" data-service-id="${service.id_service}">
                        <input type="text" value="${service.name_service}" disabled>
                        <input type="text" value="${service.name_length}" disabled>
                        <input type="number" value="${service.price}" data-price="${service.id_service}">
                        <label><input type="checkbox" ${service.ot ? 'checked' : ''} data-ot="${service.id_service}"> –û—Ç</label>
                        <div class="material-list" id="materials-${service.id_service}">
                            ${service.materials.map(m => `
                                <div class="material-item" data-id-material="${m.id_material}">
                                    <span>${m.name_material}</span>
                                    <input type="number" name="quantity" value="${m.quantity_ml || m.quant || ''}" data-material-id="${m.id_material}">
                                    <button class="delete-material-btn" data-material-id="${m.id_material}" data-service-id="${service.id_service}">–£–¥–∞–ª–∏—Ç—å</button>
                                </div>
                            `).join('')}
                        </div>
                        <select class="add-material-select" data-service-id="${service.id_service}">
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</option>
                            ${data.materials.map(m => `<option value="${m.id_material}">${m.name_material}</option>`).join('')}
                        </select>
                        <button class="add-material-to-service-btn" data-service-id="${service.id_service}">–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª</button>
                        <button class="save-service-btn" data-service-id="${service.id_service}">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button class="delete-service-btn" data-service-id="${service.id_service}">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                `;
            });
            container.innerHTML = html;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
            document.getElementById('new-service-length').addEventListener('change', (e) => {
                document.getElementById('new-length-name').style.display = e.target.value === 'new' ? 'block' : 'none';
            });

            document.getElementById('add-material-btn').addEventListener('click', () => {
                addMaterialField('new-service-materials');
            });
            document.getElementById('add-service-btn').addEventListener('click', addNewService);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª—É–≥
            document.querySelectorAll('.save-service-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const serviceId = btn.getAttribute('data-service-id');
                    await updateService(serviceId);
                });
            });

            document.querySelectorAll('.delete-service-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const serviceId = btn.getAttribute('data-service-id');
                    if (confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?')) {
                        await deleteService(serviceId);
                        loadServicesEditList();
                    }
                });
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–µ
            document.querySelectorAll('.add-material-to-service-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const serviceId = btn.getAttribute('data-service-id');
                    const select = document.querySelector(`select.add-material-select[data-service-id="${serviceId}"]`);
                    const materialId = select.value;
                    const materialName = select.selectedOptions[0]?.text || '';

                    if (!materialId) {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª');
                        return;
                    }

                    const materialList = document.getElementById(`materials-${serviceId}`);
                    const materialItem = document.createElement('div');
                    materialItem.className = 'material-item';
                    materialItem.setAttribute('data-id-material', materialId);
                    materialItem.innerHTML = `
                        <span>${materialName}</span>
                        <input type="number" data-quantity="${materialId}" value="0">
                        <button class="delete-material-btn" data-material-id="${materialId}" data-service-id="${serviceId}">–£–¥–∞–ª–∏—Ç—å</button>
                    `;
                    materialList.appendChild(materialItem);

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                    materialItem.querySelector(`.delete-material-btn[data-material-id="${materialId}"]`).addEventListener('click', async () => {
                        if (confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —É—Å–ª—É–≥–∏?')) {
                            await deleteMaterialFromService(serviceId, materialId);
                            loadServicesEditList();
                        }
                    });

                    // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
                    select.value = '';
                });
            });

            document.querySelectorAll('.delete-material-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const materialId = btn.getAttribute('data-material-id');
                    const serviceId = btn.getAttribute('data-service-id');
                    if (confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —É—Å–ª—É–≥–∏?')) {
                        await deleteMaterialFromService(serviceId, materialId);
                        loadServicesEditList();
                    }
                });
            });
        } else {
            container.innerHTML = '<p>–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>';
        }
    } catch (error) {
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥</p>';
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async function addMaterialField(containerId, serviceId = null) {
    const container = document.getElementById(containerId);
    const response = await fetch('/.netlify/functions/getmaterials');
    const data = await response.json();
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const tempId = `temp-${Date.now()}`;
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const materialItem = document.createElement('div');
    materialItem.className = 'material-item';
    materialItem.setAttribute('data-temp-id', tempId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    materialItem.innerHTML = `
        <select data-material-select="${tempId}">
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</option>
            ${data.materials.map(m => `<option value="${m.id_material}" data-name="${m.name_material}">${m.name_material}</option>`).join('')}
        </select>
        <input type="number" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/ml" data-quantity="${tempId}" value="0">
        <button class="remove-material-btn" data-temp-id="${tempId}">–£–¥–∞–ª–∏—Ç—å</button>
    `;
    container.appendChild(materialItem);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    materialItem.querySelector(`.remove-material-btn[data-temp-id="${tempId}"]`).addEventListener('click', () => {
        materialItem.remove();
    });
    
    // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º data-id-material
    materialItem.querySelector(`select[data-material-select="${tempId}"]`).addEventListener('change', (e) => {
        const selectedOption = e.target.selectedOptions[0];
        if (selectedOption.value) {
            materialItem.setAttribute('data-id-material', selectedOption.value);
            materialItem.removeAttribute('data-temp-id');
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
async function addNewService() {
    const name = document.getElementById('new-service-name')?.value;
    const categoryId = document.getElementById('new-service-category')?.value;
    const lengthId = document.getElementById('new-service-length')?.value;
    const newLengthName = document.getElementById('new-length-name')?.value;
    const ot = document.getElementById('new-service-ot')?.checked;
    const price = document.getElementById('new-service-price')?.value;
    const duration = document.getElementById('new-service-duration')?.value;
    const materials = Array.from(document.querySelectorAll('#new-service-materials .material-item')).map(item => ({
        id_material: item.querySelector('select').value,
        quantity: item.querySelector('input[data-quantity]').value
    }));

    if (!name || !price || !duration) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    try {
        const response = await fetch('/.netlify/functions/addservice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name_service: name,
                id_category: categoryId,
                id_length: lengthId === 'new' ? `new_${newLengthName}` : lengthId,
                ot: ot ? '–æ—Ç' : null,
                price,
                duration_minutes: duration,
                materials
            })
        });
        if (response.ok) {
            alert('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            await loadServicesEditList(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            const formReset = () => {
                const nameInput = document.getElementById('new-service-name');
                const priceInput = document.getElementById('new-service-price');
                const durationInput = document.getElementById('new-service-duration');
                const otInput = document.getElementById('new-service-ot');
                const materialsContainer = document.getElementById('new-service-materials');
                if (nameInput && priceInput && durationInput && otInput && materialsContainer) {
                    nameInput.value = '';
                    priceInput.value = '';
                    durationInput.value = '';
                    otInput.checked = false;
                    materialsContainer.innerHTML = '<h5>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h5>';
                }
            };
            setTimeout(formReset, 0); // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
async function updateService(serviceId) {
    const price = document.querySelector(`input[data-price="${serviceId}"]`).value;
    const ot = document.querySelector(`input[data-ot="${serviceId}"]`).checked;
    const materials = Array.from(document.querySelectorAll(`#materials-${serviceId} .material-item`)).map(item => {
        const idMaterial = item.getAttribute('data-id-material') || item.querySelector('select')?.value;
        const quantityInput = item.querySelector('input[data-quantity]');
        if (!idMaterial) return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
        return {
            id_material: idMaterial,
            quantity: quantityInput ? parseFloat(quantityInput.value) || 0 : 0
        };
    }).filter(item => item !== null); // –£–¥–∞–ª—è–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã

    console.log('Materials to send:', materials); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try {
        const response = await fetch('/.netlify/functions/updateservice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id_service: serviceId,
                price,
                ot: ot ? '–æ—Ç' : null,
                materials
            })
        });
        if (response.ok) {
            alert('–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            loadServicesEditList();
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
        console.error('Update service error:', error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
async function deleteService(serviceId) {
    try {
        const response = await fetch('/.netlify/functions/deleteservice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id_service: serviceId })
        });
        if (response.ok) {
            alert('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ —É—Å–ª—É–≥–∏
async function deleteMaterialFromService(serviceId, materialId) {
    try {
        const response = await fetch('/.netlify/functions/deletematerialfromservice', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id_service: serviceId, id_material: materialId })
        });
        if (response.ok) {
            alert('–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ —É—Å–ª—É–≥–∏');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadMaterialsEditList() {
    const container = document.getElementById('materials-tab-content');
    container.innerHTML = '<div class="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</div>';

    try {
        const response = await fetch('/.netlify/functions/getmaterials');
        const data = await response.json();
        console.log('Materials data:', data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (data.materials && data.materials.length > 0) {
            let html = `
                <div class="add-material-form">
                    <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª</h4>
                    <input type="text" id="new-material-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞">
                    <input type="number" id="new-material-price" placeholder="–¶–µ–Ω–∞ (‚ÇΩ)">
                    <input type="number" id="new-material-ml" placeholder="–û–±—ä–µ–º (–º–ª)">
                    <input type="number" id="new-material-quantity" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ">
                    <button id="add-material-btn-final" class="form-button">–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª</button>
                </div>
                <div class="materials-table-container">
                    <table class="materials-table">
                        <thead>
                            <tr>
                                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th>–¶–µ–Ω–∞ (‚ÇΩ)</th>
                                <th>–û–±—ä—ë–º (–º–ª)</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            data.materials.forEach(material => {
                const isMlEmpty = !material.ml || material.ml === '';
                const isQuantityEmpty = !material.quantity || material.quantity === '';
                html += `
                    <tr class="material-edit-item" data-material-id="${material.id_material}">
                        <td>
                            <input type="text" value="${material.name_material}" disabled>
                        </td>
                        <td>
                            <input type="number" value="${material.price_mat}" data-price="${material.id_material}">
                        </td>
                        <td>
                            <input type="number" value="${material.ml || ''}" data-ml="${material.id_material}" ${isMlEmpty ? 'disabled' : ''}>
                        </td>
                        <td>
                            <input type="number" value="${material.quantity || ''}" data-quantity="${material.id_material}" ${isQuantityEmpty ? 'disabled' : ''}>
                        </td>
                        <td>
                            <button class="save-material-btn" data-material-id="${material.id_material}">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            <button class="delete-material-btn" data-material-id="${material.id_material}">–£–¥–∞–ª–∏—Ç—å</button>
                        </td>
                    </tr>
                `;
            });
            html += `
                        </tbody>
                    </table>
                </div>
            `;
            container.innerHTML = html;

            document.getElementById('add-material-btn-final').addEventListener('click', addNewMaterial);

            document.querySelectorAll('.save-material-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const materialId = btn.getAttribute('data-material-id');
                    await updateMaterial(materialId);
                });
            });

            document.querySelectorAll('.delete-material-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const materialId = btn.getAttribute('data-material-id');
                    if (confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?')) {
                        await deleteMaterial(materialId);
                        loadMaterialsEditList();
                    }
                });
            });

            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–û–±—ä—ë–º (–º–ª)"
            document.querySelectorAll('.materials-table td input[data-ml]').forEach(mlInput => {
                mlInput.addEventListener('input', (e) => {
                    const materialId = e.target.getAttribute('data-ml');
                    const mlValue = e.target.value.trim();
                    if (mlValue === '') {
                        e.target.disabled = true;
                    } else {
                        e.target.disabled = false;
                    }
                });
            });

            // –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            document.querySelectorAll('.materials-table td input[data-quantity]').forEach(quantityInput => {
                quantityInput.addEventListener('input', (e) => {
                    const materialId = e.target.getAttribute('data-quantity');
                    const quantityValue = e.target.value.trim();
                    if (quantityValue === '') {
                        e.target.disabled = true;
                    } else {
                        e.target.disabled = false;
                    }
                });
            });
        } else {
            container.innerHTML = '<p>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>';
        }
    } catch (error) {
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>';
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    }
}


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async function addNewMaterial() {
    const name = document.getElementById('new-material-name')?.value;
    const price = document.getElementById('new-material-price')?.value;
    const ml = document.getElementById('new-material-ml')?.value;
    const quantity = document.getElementById('new-material-quantity')?.value;

    if (!name || !price) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        return;
    }

    try {
        const response = await fetch('/.netlify/functions/addmaterial', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name_material: name,
                price_mat: price,
                ml: ml || null,
                quantity: quantity || null
            })
        });
        if (response.ok) {
            alert('–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω');
            await loadMaterialsEditList(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            const formReset = () => {
                const nameInput = document.getElementById('new-material-name');
                const priceInput = document.getElementById('new-material-price');
                const mlInput = document.getElementById('new-material-ml');
                const quantityInput = document.getElementById('new-material-quantity');
                if (nameInput && priceInput && mlInput && quantityInput) {
                    nameInput.value = '';
                    priceInput.value = '';
                    mlInput.value = '';
                    quantityInput.value = '';
                }
            };
            setTimeout(formReset, 0); // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async function updateMaterial(materialId) {
    const price = document.querySelector(`input[data-price="${materialId}"]`).value;
    const ml = document.querySelector(`input[data-ml="${materialId}"]`).value;
    const quantity = document.querySelector(`input[data-quantity="${materialId}"]`).value;

    try {
        const response = await fetch('/.netlify/functions/updatematerial', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id_material: materialId,
                price_mat: price,
                ml: ml || null,
                quantity: quantity || null
            })
        });
        if (response.ok) {
            alert('–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
            loadMaterialsEditList();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async function deleteMaterial(materialId) {
    try {
        const response = await fetch('/.netlify/functions/deletematerial', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id_material: materialId })
        });
        if (response.ok) {
            alert('–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    checkAndShowEditServicesButton();
    initServicesEditModal();
});

